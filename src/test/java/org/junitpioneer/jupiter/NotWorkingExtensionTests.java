/*
 * Copyright 2016-2021 the original author or authors.
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v2.0 which
 * accompanies this distribution and is available at
 *
 * http://www.eclipse.org/legal/epl-v20.html
 */

package org.junitpioneer.jupiter;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junitpioneer.testkit.assertion.PioneerAssert.assertThat;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junitpioneer.testkit.ExecutionResults;
import org.junitpioneer.testkit.PioneerTestKit;
import org.opentest4j.TestAbortedException;

@DisplayName("NotWorking extension")
public class NotWorkingExtensionTests {

	@Test
	void abortsOnTestFailure() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClass.class, "failure");
		assertThat(results)
				.hasSingleStartedTest()
				.whichAborted()
				.withExceptionInstanceOf(TestAbortedException.class)
				.hasMessage("Test marked as 'not working' failed as expected");
	}

	@Test
	void abortsOnTestFailureWithMessage() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClass.class, "failureWithMessage");
		assertThat(results)
				.hasSingleStartedTest()
				.whichAborted()
				.withExceptionInstanceOf(TestAbortedException.class)
				.hasMessage("Custom message");
	}

	@Test
	void abortsOnError() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClass.class, "error");
		assertThat(results)
				.hasSingleStartedTest()
				.whichAborted()
				.withExceptionInstanceOf(TestAbortedException.class)
				.hasMessage("Test marked as 'not working' failed as expected");
	}

	@Test
	void preservesTestAbort() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClass.class, "aborted");
		assertThat(results)
				.hasSingleStartedTest()
				.whichAborted()
				.withExceptionInstanceOf(TestAbortedException.class)
				// Ignore prefix generated by JUnit
				.hasMessageEndingWith("custom assumption message");
	}

	@Test
	void failsOnWorkingTest() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClass.class, "working");
		assertThat(results)
				.hasSingleStartedTest()
				.whichFailed()
				.withExceptionInstanceOf(AssertionError.class)
				.hasMessage("Test marked as 'not working' succeeded; remove @NotWorking from it");
	}

	@Test
	void doesNotAbortOnBeforeEachTestFailure() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClassFailureBeforeEach.class, "test");
		assertThat(results)
				.hasSingleFailedTest()
				.withExceptionInstanceOf(AssertionError.class)
				.hasMessage("before each");
	}

	@Test
	void abortsOnAfterEachTestFailure() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClassFailureAfterEach.class, "test");
		assertThat(results)
				.hasSingleStartedTest()
				.whichAborted()
				.withExceptionInstanceOf(TestAbortedException.class)
				.hasMessage("Test marked as 'not working' failed as expected");
	}

	@Test
	void doesNotAbortOnBeforeAllTestFailure() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClassFailureBeforeAll.class, "test");
		assertThat(results).hasNumberOfStartedTests(0);
		assertThat(results)
				.hasSingleFailedContainer()
				.withExceptionInstanceOf(AssertionError.class)
				.hasMessage("before all");
	}

	@Test
	void doesNotAbortOnAfterAllTestFailure() {
		ExecutionResults results = PioneerTestKit.executeTestMethod(DummyTestClassFailureAfterAll.class, "test");
		assertThat(results)
				.hasSingleStartedTest()
				.whichFailed()
				.withExceptionInstanceOf(AssertionError.class)
				.hasMessage("Test marked as 'not working' succeeded; remove @NotWorking from it");
	}

	static class DummyTestClass {

		@NotWorking
		@Test
		void failure() {
			fail("failed");
		}

		@NotWorking("Custom message")
		@Test
		void failureWithMessage() {
			fail("failed");
		}

		@NotWorking
		@Test
		void error() {
			throw new RuntimeException("test");
		}

		@NotWorking
		@Test
		void aborted() {
			// Assumption should have higher precedence than @NotWorking
			Assumptions.assumeTrue(false, "custom assumption message");
		}

		@NotWorking
		@Test
		void working() {
			// Does not cause failure or error
		}

	}

	/**
	 * {@link BeforeEach} should not be considered by {@link NotWorking} because it
	 * is not specific to the annotated test method.
	 */
	static class DummyTestClassFailureBeforeEach {

		@BeforeEach
		void beforeEach() {
			fail("before each");
		}

		@NotWorking
		@Test
		void test() {
		}

	}

	/**
	 * {@link AfterEach} should be considered by {@link NotWorking} because it
	 * might fail due to changes made to the test instance by the test method.
	 */
	static class DummyTestClassFailureAfterEach {

		@AfterEach
		void afterEach() {
			fail("after each");
		}

		@NotWorking
		@Test
		void test() {
		}

	}

	/**
	 * {@link BeforeAll} should not be considered by {@link NotWorking}.
	 */
	static class DummyTestClassFailureBeforeAll {

		@BeforeAll
		static void beforeAll() {
			fail("before all");
		}

		@NotWorking
		@Test
		void test() {
		}

	}

	/**
	 * {@link AfterAll} should not be considered by {@link NotWorking}.
	 */
	static class DummyTestClassFailureAfterAll {

		@AfterAll
		static void afterAll() {
			fail("after all");
		}

		@NotWorking
		@Test
		void test() {
		}

	}

}
