name: Main build

env:
  EXPERIMENTAL_JAVA: 18

on:
  # We want to trigger our builds all the time for the default branch
  # except when Shipkit creates a new version tag
  push:
    branches: 'main'
    tags-ignore:
      - 'v**'
  # Each pull request is important to us, doesn't matter from which branch.
  # Furthermore, we do not want to build on just the default GitHub Action
  # events, we also want to react onto `labeled` events for our extended
  # build execution
  pull_request:
    branches: '*'
    types: [labeled, opened, synchronize, reopened]
  # We also utilize this pipeline for releasing. By providing a `version`
  # and setting `releasing` to `true`, we can trigger a release.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version string, e.g. 1.4.0'
        required: true
      releasing:
        description: "Is this a release build? true/false"
        required: true
        default: "false"

jobs:
  # Basic Gradle wrapper validation. This step is run first, due to security
  # concerns. Running our whole pipeline with Gradle with a corrupt wrapper,
  # could expose our secrets, and we definitely want to prevent this.
  validation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: Gradle wrapper validation
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

  # Our basic build step as we want contributors to have a nice developer
  # experience with little build time and sufficient feedback. Therefore, we
  # only build this on our default Java version but for all operating systems
  # we are supporting. This allows for a fast execution and fast feedback. The
  # extended tests will run later under certain conditions. If the OS is
  # Ubuntu, we also run the SonarCloud analysis.
  basic:
    runs-on: ${{ matrix.os }}-latest
    needs: validation
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
    name: with Java 11 on ${{ matrix.os }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
        with:
          # Sonar needs the whole Git history for issue assignment
          fetch-depth: 0
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: temurin
          cache: 'gradle'
      - name: Cache SonarCloud results
        if: ${{ matrix.os == 'ubuntu' }}
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache/
          key: ubuntu-sonar
      - name: Gradle build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: --refresh-dependencies --stacktrace --scan clean build
      - name: SonarCloud analysis
        if: ${{ matrix.os == 'ubuntu' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: "61ab2579215aa8a0024a2f9368fc1298fdecfd18"
        run: ./gradlew jacocoTestReport sonarqube --stacktrace -i

  # Our full integration job, which will build for a matrix out of our supported
  # Java versions, operating systems, modular or not, and various JUnit versions.
  # This build is executed on all tags and the default branch. Furthermore, we will
  # also execute this for pull requests with the label `merge-ready`.
  full-featured:
    if: (contains(github.event.pull_request.labels.*.name, 'merge-ready') || !github.event.pull_request)
    needs: basic
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    strategy:
      matrix:
        java: [ 11, 17 ]
        junit-version: [ '5.8.2' ]
        modular: [true, false]
        os: [ubuntu, macos, windows]
    name: with Java ${{ matrix.java }}, JUnit ${{ matrix.junit-version }}, Modular ${{ matrix.modular }} on ${{ matrix.os }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: 'gradle'
      - name: Gradle build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: --refresh-dependencies -PmodularBuild=${{ matrix.modular }} -PjunitVersion=${{ matrix.junit-version }} --stacktrace --scan clean build

  # We want to be up-to-date and know issues with future Java versions as soon as possible.
  # Furthermore, we also would love to see our build working with the latest Gradle version.
  # As those builds might fail, they are allowed to fail, and should not prevent merges.
  experimental:
    if: (contains(github.event.pull_request.labels.*.name, 'merge-ready') || !github.event.pull_request)
    needs: full-featured
    runs-on: ${{ matrix.os }}-latest
    continue-on-error: true
    timeout-minutes: 15
    strategy:
      matrix:
        junit-version: [ '5.8.2' ]
        modular: [true, false]
        os: [ubuntu, macos, windows]
    name: Experimental build with newest JDK early-access build and Gradle release candidate
    # Gradle doesn't work with JDK EA builds, so we start it with a supported Java version,
    # but execute the build on the experimental version
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - uses: sormuras/download-jdk@v1
        with:
          feature: ${{ env.EXPERIMENTAL_JAVA }}
      - uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: jdkfile
          jdkFile: ${{ env.JDK_FILE }}
      - name: Prepare JDK_EXPERIMENTAL env var
        shell: bash
        run: echo "JDK_EXPERIMENTAL=$JAVA_HOME" >> $GITHUB_ENV
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin
          cache: 'gradle'
      - name: Gradle toolchains
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: release-candidate
          arguments: -Porg.gradle.java.installations.auto-download=false javaToolchains
      - name: Gradle build
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: release-candidate
          arguments: --refresh-dependencies -PexperimentalJavaVersion=${{ env.EXPERIMENTAL_JAVA }} -PmodularBuild=${{ matrix.modular }} -PjunitVersion=${{ matrix.junit-version }} -Porg.gradle.java.installations.auto-download=false --stacktrace --scan clean build

  # A release will be created if there is a `version` defined and `releasing` is set to `true`.
  # If not, this stage will be ignored.
  release:
    if: github.event.inputs.version != '' && github.event.inputs.releasing == 'true'
    runs-on: ubuntu-latest
    needs: full-featured
    timeout-minutes: 15
    name: Release Pioneer into the wild
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
        with:
          # Shipkit needs the whole Git history for changelog generation
          fetch-depth: 0
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: temurin
      - name: Perform release
        uses: gradle/gradle-build-action@v2
        env:
          # used to trigger website build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # used by `io.github.gradle-nexus.publish-plugin` to sign artifacts
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.JUNIT_PIONEER_PGP_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.JUNIT_PIONEER_PGP_PASSWORD }}
          # used by `io.github.gradle-nexus.publish-plugin` to publish to Maven Central
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.NEXUS_TOKEN_USERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.NEXUS_TOKEN_PASSWORD }}
          # defines released version according to GitHub Action input
          ORG_GRADLE_PROJECT_version: ${{ github.event.inputs.version }}
        with:
          arguments: publishToSonatype closeAndReleaseSonatypeStagingRepository githubRelease

  # After our release, we also need to trigger an update for our website build
  update-website:
    runs-on: ubuntu-latest
    needs: release
    timeout-minutes: 15
    name: Update website
    steps:
      - name: Trigger website build
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_WRITE_TOKEN }}
          repository: junit-pioneer/junit-pioneer.github.io
          event-type: triggerSiteBuild
